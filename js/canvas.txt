// Инициализация канваса и базовых функций
function initCanvas() {
    // Создание функции для создания нового макета
    window.createLayout = function(width, height) {
        // Создаем прямоугольник для макета
        const layout = new fabric.Rect({
            width: width,
            height: height,
            left: (canvas.width - width) / 2,
            top: (canvas.height - height) / 2,
            fill: '#ffffff',
            stroke: '#ddd',
            strokeWidth: 1,
            rx: 0,
            ry: 0,
            selectable: true,
            strokeUniform: true,
            id: `layout-${Date.now()}`,
            name: `Макет ${width}×${height}`,
            type: 'layout'
        });
        
        // Добавляем макет на холст
        canvas.add(layout);
        
        // Выбираем макет
        canvas.setActiveObject(layout);
        canvas.renderAll();
        
        // Обновляем панель слоев
        updateLayersPanel();
        
        // Добавляем в историю
        window.addToHistory();
        
        return layout;
    };

    // Функция для добавления текста
    window.addTextElement = function(text = 'Редактируемый текст') {
        // Проверяем наличие выбранного макета
        const activeObject = canvas.getActiveObject();
        if (!activeObject || activeObject.type !== 'layout') {
            alert('Пожалуйста, выберите макет для добавления текста');
            return;
        }
        
        // Создаем текстовый объект
        const textObj = new fabric.IText(text, {
            left: activeObject.left + 50,
            top: activeObject.top + 50,
            fontFamily: 'Arial',
            fontSize: 20,
            fill: '#000000',
            id: `text-${Date.now()}`,
            name: 'Текст',
            objectType: 'text',
            type: 'i-text'
        });
        
        // Добавляем текст на холст
        canvas.add(textObj);
        canvas.setActiveObject(textObj);
        canvas.renderAll();
        
        // Обновляем панель слоев
        updateLayersPanel();
        
        // Добавляем в историю
        window.addToHistory();
        
        return textObj;
    };

    // Функция для добавления изображения
    window.addImageElement = function(imageUrl) {
        // Проверяем наличие выбранного макета
        const activeObject = canvas.getActiveObject();
        if (!activeObject || activeObject.type !== 'layout') {
            alert('Пожалуйста, выберите макет для добавления изображения');
            return;
        }
        
        // Загружаем изображение
        fabric.Image.fromURL(imageUrl, function(img) {
            // Ограничиваем размер изображения
            const maxWidth = 300;
            if (img.width > maxWidth) {
                img.scaleToWidth(maxWidth);
            }
            
            // Устанавливаем позицию и свойства
            img.set({
                left: activeObject.left + 50,
                top: activeObject.top + 50,
                id: `image-${Date.now()}`,
                name: 'Изображение',
                objectType: 'image'
            });
            
            // Добавляем изображение на холст
            canvas.add(img);
            canvas.setActiveObject(img);
            canvas.renderAll();
            
            // Обновляем панель слоев
            updateLayersPanel();
            
            // Добавляем в историю
            window.addToHistory();
        });
    };

    // Функция для добавления фигуры
    window.addShapeElement = function(shapeType) {
        // Проверяем наличие выбранного макета
        const activeObject = canvas.getActiveObject();
        if (!activeObject || activeObject.type !== 'layout') {
            alert('Пожалуйста, выберите макет для добавления фигуры');
            return;
        }
        
        // Создаем фигуру в зависимости от типа
        let shape;
        
        switch(shapeType) {
            case 'rectangle':
                shape = new fabric.Rect({
                    width: 100,
                    height: 80,
                    fill: '#3498db'
                });
                break;
            case 'circle':
                shape = new fabric.Circle({
                    radius: 50,
                    fill: '#e74c3c'
                });
                break;
            case 'triangle':
                shape = new fabric.Triangle({
                    width: 100,
                    height: 100,
                    fill: '#2ecc71'
                });
                break;
            case 'line':
                shape = new fabric.Line([0, 0, 100, 0], {
                    stroke: '#f1c40f',
                    strokeWidth: 5
                });
                break;
            case 'star':
                shape = createStar();
                break;
            default:
                shape = new fabric.Rect({
                    width: 100,
                    height: 100,
                    fill: '#3498db'
                });
        }
        
        // Устанавливаем общие свойства фигуры
        shape.set({
            left: activeObject.left + 50,
            top: activeObject.top + 50,
            id: `shape-${Date.now()}`,
            name: `Фигура: ${shapeType}`,
            objectType: 'shape',
            customProps: { shapeType: shapeType }
        });
        
        // Добавляем фигуру на холст
        canvas.add(shape);
        canvas.setActiveObject(shape);
        canvas.renderAll();
        
        // Обновляем панель слоев
        updateLayersPanel();
        
        // Добавляем в историю
        window.addToHistory();
        
        return shape;
    };

    // Функция для создания звезды
    function createStar() {
        const points = [];
        const outerRadius = 50;
        const innerRadius = 25;
        const spikes = 5;
        
        for (let i = 0; i < spikes * 2; i++) {
            const radius = i % 2 === 0 ? outerRadius : innerRadius;
            const angle = i * Math.PI / spikes;
            const x = radius * Math.sin(angle);
            const y = radius * Math.cos(angle);
            points.push({ x, y });
        }
        
        return new fabric.Polygon(points, {
            fill: '#9b59b6',
            left: 0,
            top: 0
        });
    }

    // Обновление панели слоев
    window.updateLayersPanel = function() {
        const layersList = document.querySelector('.layers-list');
        layersList.innerHTML = '';
        
        // Получаем все объекты в обратном порядке (от верхнего к нижнему)
        const objects = canvas.getObjects().slice().reverse();
        
        // Добавляем элементы в панель слоев
        objects.forEach(obj => {
            const layerItem = document.createElement('div');
            layerItem.classList.add('layer-item');
            layerItem.dataset.id = obj.id;
            
            // Проверяем, является ли объект выбранным
            if (canvas.getActiveObject() === obj) {
                layerItem.classList.add('selected');
            }
            
            // Определяем иконку в зависимости от типа
            let icon = 'layers';
            if (obj.type === 'layout') icon = 'dashboard';
            else if (obj.objectType === 'text' || obj.type === 'i-text') icon = 'text_fields';
            else if (obj.objectType === 'image') icon = 'image';
            else if (obj.objectType === 'shape') icon = 'category';
            else if (obj.type === 'group') icon = 'group_work';
            
            // Формируем содержимое слоя
            layerItem.innerHTML = `
                <span class="material-icons layer-visibility">visibility</span>
                <span class="material-icons layer-type-icon">${icon}</span>
                <span class="layer-name">${obj.name || 'Слой'}</span>
                <div class="layer-actions">
                    <span class="material-icons layer-delete-btn" title="Удалить">delete</span>
                </div>
            `;
            
            // Обработчик клика для выделения объекта
            layerItem.addEventListener('click', () => {
                canvas.setActiveObject(obj);
                canvas.renderAll();
                updateLayerSelection(obj.id);
            });
            
            // Обработчик видимости
            const visibilityIcon = layerItem.querySelector('.layer-visibility');
            visibilityIcon.addEventListener('click', (e) => {
                e.stopPropagation();
                obj.visible = !obj.visible;
                
                if (obj.visible) {
                    visibilityIcon.textContent = 'visibility';
                } else {
                    visibilityIcon.textContent = 'visibility_off';
                }
                
                canvas.renderAll();
            });
            
            // Обработчик удаления
            const deleteBtn = layerItem.querySelector('.layer-delete-btn');
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                canvas.remove(obj);
                canvas.renderAll();
                window.updateLayersPanel();
                window.addToHistory();
            });
            
            // Добавляем слой в панель
            layersList.appendChild(layerItem);
        });
    };

    // Функция для обновления выделения слоев
    function updateLayerSelection(id) {
        document.querySelectorAll('.layer-item').forEach(item => {
            item.classList.toggle('selected', item.dataset.id === id);
        });
        
        // Обновляем панель свойств для выделенного объекта
        updatePropertiesPanel();
    }
    
    // Обработчики событий выбора объекта
    canvas.on('selection:created', function(e) {
        updateLayerSelection(e.selected[0].id);
    });
    
    canvas.on('selection:updated', function(e) {
        updateLayerSelection(e.selected[0].id);
    });
    
    canvas.on('selection:cleared', function() {
        document.querySelectorAll('.layer-item').forEach(item => {
            item.classList.remove('selected');
        });
        clearPropertiesPanel();
    });
    
    // Экспортируем функции
    window.canvasFunctions = {
        updateLayerSelection
    };
    
    // Инициализация завершена
    console.log('Canvas initialized');
}
